-- -----------------------------------------------------
-- CST2355 302 Group 11 - Assignment 1
-- -----------------------------------------------------
CREATE DATABASE toolRental;

USE toolRental;

-- -----------------------------------------------------
-- Table Customer
-- -----------------------------------------------------
DROP TABLE IF EXISTS Customer;
CREATE TABLE Customer (
  CustomerID INT IDENTITY(1,1) PRIMARY KEY,
  FirstName VARCHAR(50) NOT NULL,
  LastName VARCHAR(50) NOT NULL,
  Email VARCHAR(100) NOT NULL CHECK (Email LIKE '%@%'),
  Phone VARCHAR(15) NOT NULL,
  Address VARCHAR(150) NOT NULL,
  CustomerType VARCHAR(10) 
);

INSERT INTO Customer (FirstName, LastName, Email, Phone, Address, CustomerType)
VALUES
    ('Elaine', 'Ho', 'ho000104@algonquinlive.com', '613-111-55555', '12 Woodroffe Ave, Ottawa, ON', null),
	('Seabyul', 'Yun', 'yun00014@algonquinlive.com', '416-002-8888', '350 Victoria St, Toronto, ON M5B 2K3', null),
	('Jason', 'Zhang', 'zhan0820@algonquinlive.com', '613-858-5456', '238 Mount Nebo Way, Gloucester, ON K1X 0C8', null)

INSERT INTO Customer (FirstName, LastName, Email, Phone, Address, CustomerType)
VALUES
	('Hans', 'Kang', 'hans@gmail.com', '416-111-8888', '123 Nepean Raod, Nepean, Ottawa, K4Y 0W0', 'Employee'),
	('Benson', 'Cheng', 'Benson@outlook.com', '613-555-8888', '455 Carling Ave, Ottawa, M6Y 1T7', 'Corporate')


select * from Customer; 


DROP TABLE IF EXISTS Corporate;
CREATE TABLE Corporate(
  CorporateID INT IDENTITY(1,1) PRIMARY KEY,
  Business VARCHAR(50) NOT NULL,
  Website VARCHAR(50) NOT NULL,
  Customer_CustomerID INT NOT NULL,
    CONSTRAINT fk_Corporate_Customer1 FOREIGN KEY 
	(Customer_CustomerID) REFERENCES Customer (CustomerID)
);
INSERT INTO Corporate(Business, Website, Customer_CustomerID)
VALUES
	('Media', 'https://www.ledmediapro.com/', 5)

select * from Corporate;

DROP TABLE IF EXISTS Empolyee;
CREATE TABLE Empolyee(
  EmployeeID INT IDENTITY(1,1) PRIMARY KEY,
  EmployeeNumber INT NOT NULL,
  JobTitle VARCHAR(50),
  Customer_CustomerID INT NOT NULL,
  CONSTRAINT fk_Employee_Customer1 FOREIGN KEY 
  (Customer_CustomerID) REFERENCES Customer (CustomerID)
);

INSERT INTO Empolyee(EmployeeNumber, JobTitle, Customer_CustomerID)
VALUES
	('567890', 'Director', 4)

select * from Empolyee

-- -----------------------------------------------------
-- Table RentalOrder
-- -----------------------------------------------------
DROP TABLE IF EXISTS RentalOrder;
CREATE TABLE RentalOrder (
  OrderID INT IDENTITY(1,1) PRIMARY KEY,
  OrderDate DATE NULL,
  ReturnDate DATE NULL,  
  Customer_CustomerID INT NOT NULL,
  CONSTRAINT chk_ReturnDateAfterOrderDate CHECK (ReturnDate > OrderDate),   
  CONSTRAINT fk_RentalOrder_Customer1 FOREIGN KEY (Customer_CustomerID) REFERENCES Customer (CustomerID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

INSERT INTO RentalOrder(OrderDate, ReturnDate, Customer_CustomerID)
VALUES
    ('2023-05-12', '2023-05-15', 3),
	('2023-10-01', '2023-10-02', 2);
	
select * from RentalOrder;

-- -----------------------------------------------------
-- Table Category
-- -----------------------------------------------------
DROP TABLE IF EXISTS Category;
CREATE TABLE Category (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50),
    ParentCategoryID INT  -- Reference to the Tool's parent Category (self-referencing foreign key)
    CONSTRAINT fk_Category_Category1 FOREIGN KEY (ParentCategoryID) REFERENCES Category(CategoryID)
);

-- Sample data for Category hierarchy
INSERT INTO Category (CategoryID, CategoryName, ParentCategoryID)
VALUES
    (1, 'Tools', NULL),             -- Tools (top-level)
    (2, 'Power Tools', 1),           
    (3, 'Hand Tools', 1),     
    (4, 'Plumbing Tools', 1),         
    (5, 'Vehicles', 1), 
	(6, 'Drills', 2),
	(7, 'Saw',2), 
	(8, 'Miter Saw',7),
    (9, 'Chainsaw', 7),
    (10, 'Table Saw', 7),
    (11, 'Circlar Saw',7),
    (12, 'Jigsaw', 7); 

-- Query to retrieve the entire hierarchy
select * from Category;

-- -----------------------------------------------------
-- Table Tool
-- -----------------------------------------------------
DROP TABLE IF EXISTS tool;
CREATE TABLE tool (
  ToolID INT IDENTITY(1,1) PRIMARY KEY,
  ToolName VARCHAR(50) NOT NULL,
  Description VARCHAR(200) NULL,
  RentalPricePerDay DECIMAL(10, 2) NULL,
  QuantityInStock INT NOT NULL CHECK (QuantityInStock >= 0),   
  Category_CategoryID INT NOT NULL, 
  CONSTRAINT fk_Tool_Category1 FOREIGN KEY (Category_CategoryID) REFERENCES Category (CategoryID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION
);

INSERT INTO tool (ToolName, Description, RentalPricePerDay, QuantityInStock,Category_CategoryID)
VALUES 
   ('Table Saw Dewalt II6', 'Table saws are a great addition to any woodworker or contractor arsenal, excellent for cutting larger boards to size, and useful for many other cutting jobs', 10.99, 5, 10),
   ('AVID Drill 100', '20V MAX Electric Battery Power Drill', 4.50, 20, 6);  
   
select * from tool; 

-- -----------------------------------------------------
-- Table OrderDetails
-- -----------------------------------------------------
DROP TABLE IF EXISTS OrderDetails;
CREATE TABLE OrderDetails (
  OrderDetailID INT IDENTITY(1,1) PRIMARY KEY,
  Tool_ToolID INT NOT NULL,
  RentalOrder_OrderID INT NOT NULL,
  RentalPrice DECIMAL(10, 2) NULL CHECK (RentalPrice > 0), 
   CONSTRAINT fk_OrderDetails_Tool1 FOREIGN KEY (Tool_ToolID) REFERENCES Tool (ToolID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_OrderDetails_RentalOrder1 FOREIGN KEY (RentalOrder_OrderID) REFERENCES RentalOrder (OrderID)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

INSERT INTO OrderDetails (Tool_ToolID, RentalOrder_OrderID)
VALUES
   (2, 1),
   (1, 2); 

select * from OrderDetails; 

-- find out server name
select @@ServerName


--Change Database Ownership 
USE toolRental;
EXEC sp_changedbowner 'YunUser', 'true';

-- Options: 1: ODSB 17, 2: Windows Authentizen, 3: database: default -> toolRental
